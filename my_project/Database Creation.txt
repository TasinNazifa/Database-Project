Database Creation:
CREATE DATABASE IF NOT EXISTS testdb;
USE testdb;

TABLES CREATION:
1. Customers Table (Updated):
CREATE TABLE IF NOT EXISTS Customers (
    Customer_ID INT AUTO_INCREMENT PRIMARY KEY,
    Customer_Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Contact_Info VARCHAR(50),
    Loyalty INT DEFAULT 0,
    History TEXT,
    PasswordHash VARCHAR(255) NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


2. Admins Table (Updated)
CREATE TABLE IF NOT EXISTS Admins (
    AdminID INT AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(50) NOT NULL UNIQUE,
    PasswordHash VARCHAR(255) NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




3. Inventory Table (Updated)
CREATE TABLE IF NOT EXISTS Inventory (
    ItemID INT AUTO_INCREMENT PRIMARY KEY,
    ItemName VARCHAR(100) NOT NULL,
    Description TEXT,
    CategoryName VARCHAR(50),
    Quantity INT NOT NULL DEFAULT 0,
    UnitPrice DECIMAL(10, 2) NOT NULL,
    SupplierName VARCHAR(100),
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4. Orders Table (Updated)
CREATE TABLE IF NOT EXISTS Orders (
    OrderID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT NOT NULL,
    Email VARCHAR(100),
    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (CustomerID) REFERENCES Customers(Customer_ID)
);


5. Order_Items Table (Updated)
sql
CREATE TABLE IF NOT EXISTS Order_Items (
    OrderItemID INT AUTO_INCREMENT PRIMARY KEY,
    OrderID INT NOT NULL,
    ItemID INT NOT NULL,
    Quantity INT NOT NULL,
    UnitPrice DECIMAL(10, 2) NOT NULL,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (ItemID) REFERENCES Inventory(ItemID)
);

6. Users Table (for signup.php)
sql
CREATE TABLE IF NOT EXISTS Users (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


7. Purchase_History Table (Optional, could be replaced by Orders)
CREATE TABLE IF NOT EXISTS Purchase_History (
    PurchaseID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT NOT NULL,
    ItemID INT NOT NULL,
    Quantity INT NOT NULL,
    PurchaseDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(Customer_ID),
    FOREIGN KEY (ItemID) REFERENCES Inventory(ItemID)
);

Sample Data Insertion:
1.Insert Admin Users:
INSERT INTO Admins (Username, PasswordHash) VALUES 
('Admin1', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'), -- password: abcd
('Admin2', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'); -- password: wxyz


2.Insert Sample Customers:
INSERT INTO Customers (Customer_Name, Email, Contact_Info, PasswordHash) VALUES 
('John Doe', 'john@example.com', '123-456-7890', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'),
('Jane Smith', 'jane@example.com', '987-654-3210', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');


3.Insert Sample Inventory Items
INSERT INTO Inventory (ItemName, Description, CategoryName, Quantity, UnitPrice, SupplierName) VALUES 
('Paracetamol', 'Pain reliever and fever reducer', 'Pain Relief', 100, 5.99, 'Pharma Inc.'),
('Ibuprofen', 'Anti-inflammatory drug', 'Pain Relief', 80, 7.50, 'MediCorp'),
('Amoxicillin', 'Antibiotic for bacterial infections', 'Antibiotics', 50, 12.75, 'HealthPlus'),
('Loratadine', 'Antihistamine for allergies', 'Allergy', 120, 8.25, 'AllerMed'),
('Omeprazole', 'For heartburn and acid reflux', 'Digestive', 90, 15.99, 'GastroPharm');


Insert Sample Orders (for testing reports)
-- First order
INSERT INTO Orders (CustomerID, Email, TotalPrice, PaymentMethod) VALUES 
(1, 'john@example.com', 23.98, 'credit_card');

INSERT INTO Order_Items (OrderID, ItemID, Quantity, UnitPrice, TotalPrice) VALUES 
(1, 1, 2, 5.99, 11.98),  -- 2 x Paracetamol
(1, 2, 1, 7.50, 7.50),   -- 1 x Ibuprofen
(1, 5, 1, 15.99, 15.99); -- 1 x Omeprazole

-- Second order
INSERT INTO Orders (CustomerID, Email, TotalPrice, PaymentMethod) VALUES 
(2, 'jane@example.com', 25.50, 'paypal');

INSERT INTO Order_Items (OrderID, ItemID, Quantity, UnitPrice, TotalPrice) VALUES 
(2, 2, 2, 7.50, 15.00),  -- 2 x Ibuprofen
(2, 3, 1, 12.75, 12.75), -- 1 x Amoxicillin
(2, 4, 1, 8.25, 8.25);   -- 1 x Loratadine


Additional Views for Reporting
-- View for purchase history reporting
CREATE VIEW vw_purchase_history AS
SELECT 
    o.OrderID, 
    o.CustomerID, 
    c.Customer_Name,
    o.OrderDate, 
    oi.ItemID, 
    i.ItemName, 
    oi.Quantity, 
    oi.UnitPrice, 
    oi.TotalPrice
FROM Orders o
JOIN Order_Items oi ON o.OrderID = oi.OrderID
JOIN Inventory i ON oi.ItemID = i.ItemID
JOIN Customers c ON o.CustomerID = c.Customer_ID;

-- View for sales by product
CREATE VIEW vw_sales_by_product AS
SELECT 
    i.ItemID,
    i.ItemName,
    SUM(oi.Quantity) AS TotalSold,
    SUM(oi.TotalPrice) AS TotalRevenue
FROM Order_Items oi
JOIN Inventory i ON oi.ItemID = i.ItemID
GROUP BY i.ItemID, i.ItemName
ORDER BY TotalRevenue DESC;


Indexes for Performance:
-- For Customers table
CREATE INDEX idx_customer_email ON Customers(Email);
CREATE INDEX idx_customer_name ON Customers(Customer_Name);

-- For Inventory table
CREATE INDEX idx_inventory_category ON Inventory(CategoryName);
CREATE INDEX idx_inventory_name ON Inventory(ItemName);
CREATE INDEX idx_inventory_supplier ON Inventory(SupplierName);

-- For Orders table
CREATE INDEX idx_orders_customer ON Orders(CustomerID);
CREATE INDEX idx_orders_date ON Orders(OrderDate);

-- For Order_Items table
CREATE INDEX idx_order_items_order ON Order_Items(OrderID);
CREATE INDEX idx_order_items_item ON Order_Items(ItemID);

-- For Users table
CREATE INDEX idx_user_email ON Users(Email);